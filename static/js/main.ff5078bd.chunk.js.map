{"version":3,"sources":["views/MoviesPageView.module.css","App.module.css","components/MoviePreview/MoviePreview.module.css","components/Cast/Cast.module.css","views/MovieDetailsPageView.module.css","components/MoviesList/MoviesList.module.css","styles/base.module.css","routes.js","components/Navigation/Navigation.jsx","components/AppBar/AppBar.jsx","components/MoviePreview/MoviePreview.jsx","components/MoviesList/MoviesList.jsx","views/HomePageView.jsx","views/MoviesPageView.jsx","components/Cast/Cast.jsx","components/Reviews/Reviews.jsx","views/MovieDetailsPageView.jsx","views/NotFoundView.jsx","App.jsx","index.jsx"],"names":["module","exports","Navigation","className","m","AppBar","exact","to","routes","NavLink","activeClassName","active","MoviePreview","poster_path","title","release_date","src","alt","slice","withRouter","movies","location","moviesList","map","id","item","pathname","state","from","HomePageView","a","this","props","API","mainUrl","Axios","get","response","setState","data","results","localStorage","removeItem","container","headBlock","Component","MoviesPageView","formValue","status","handleChange","e","value","currentTarget","toLowerCase","handleSubmit","preventDefault","handleClear","getItem","formValueFromStorage","parsedMovies","JSON","parse","parsedFormValue","length","searchQuery","setItem","stringify","formBar","onSubmit","type","onClick","name","onChange","Cast","cast","original_name","profile_path","castItem","pic","Reviews","reviews","author","content","MovieDetailsPageView","genres","overview","vote_average","handleGoBack","history","push","movieId","match","params","credits","url","path","imgUrl","voteAverageInPercent","backBtn","MovieDetails","description","render","NotFoundView","App","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff5078bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MoviesPageView_container__11pun\",\"headBlock\":\"MoviesPageView_headBlock__1mWdC\",\"formBar\":\"MoviesPageView_formBar__19t6C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppBar\":\"App_AppBar__E-uqS\",\"NavLink\":\"App_NavLink__1tX2s\",\"active\":\"App_active__eYtTS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MoviePreview-thumb\":\"MoviePreview_MoviePreview-thumb__1K5ai\",\"MoviePreview-titleBlock\":\"MoviePreview_MoviePreview-titleBlock__JUGv0\",\"MoviePreview-title\":\"MoviePreview_MoviePreview-title__2o5eU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cast\":\"Cast_cast__1Cuiw\",\"castItem\":\"Cast_castItem__1yTVp\",\"pic\":\"Cast_pic__1GTBv\",\"name\":\"Cast_name__11PK3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MovieDetails\":\"MovieDetailsPageView_MovieDetails__w972_\",\"description\":\"MovieDetailsPageView_description__cGngn\",\"genres\":\"MovieDetailsPageView_genres__2ywdv\",\"backBtn\":\"MovieDetailsPageView_backBtn__2WDeE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"moviesList\":\"MoviesList_moviesList__3rZPk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavLink\":\"base_NavLink__f9qMD\",\"NavLink--active\":\"base_NavLink--active__1hgQ8\"};","export default {\n  home: '/',\n  movies: '/movies',\n  movieDetails: '/movies/:movieId',\n  // cast: '/movies/:movieId/cast',\n  // reviews: '/movies/:movieId/reviews',\n};\n\n// '/' - компонент <HomePage>, домашняя страница со списком популярных кинофильмов.\n// '/movies' - компонент <MoviesPage>, страница поиска фильмов по ключевому слову.\n// '/movies/:movieId' - компонент <MovieDetailsPage>, страница с детальной информацией о кинофильме.\n// /movies/:movieId/cast - компонент <Cast>, информация о актерском составе. Рендерится на странице <MovieDetailsPage>.\n// /movies/:movieId/reviews - компонент <Reviews>, информация об обзорах. Рендерится на странице <MovieDetailsPage>.\n\n// делаем экспорт для маршрутов (cast и reviews - это вложенная навигация)\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport routes from '../../routes';\n\nimport m from '../../App.module.css';\n\nconst Navigation = () => {\n  return (\n    <nav className={m.AppBar}>\n      <NavLink\n        exact\n        to={routes.home}\n        className={m.NavLink}\n        activeClassName={m.active}\n      >\n        Home\n      </NavLink>\n\n      <NavLink\n        to={routes.movies}\n        className={m.NavLink}\n        activeClassName={m.active}\n      >\n        Movies\n      </NavLink>\n    </nav>\n  );\n};\n\nexport default Navigation;\n\n//  51. обворачиваем навигацию в <nav> -> MoviesList\n","import React from 'react';\nimport Navigation from '../Navigation';\n\nconst AppBar = () => {\n  return (\n    <header>\n      <Navigation />\n    </header>\n  );\n};\n\nexport default AppBar;\n\n// 49. обворачиваем навигацию в <header>, но...\n// 50. даная навигация тут лишь часть AppBar, поэтому выносим её в отдельный компонент Navigation\n// --- импортируем и рендерим Navigation в <header> -> Navigation\n","import React from 'react';\nimport m from './MoviePreview.module.css';\n\nconst MoviePreview = ({ poster_path, title, release_date }) => {\n  return (\n    <div className={m[`MoviePreview-thumb`]}>\n      <img src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} />\n\n      <div className={m[`MoviePreview-titleBlock`]}>\n        <h5 className={m[`MoviePreview-title`]}>{`${title}`}</h5>\n\n        {release_date && (\n          <h5 className={m[`MoviePreview-title`]}>\n            {`(${release_date.slice(0, 4)})`}\n          </h5>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MoviePreview;\n\n// 56. приняли пропсы и расписали как надо\n// --- добавили классы -> MovieDetailsPageView\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport MoviePreview from '../MoviePreview/MoviePreview';\nimport m from './MoviesList.module.css';\n\nconst MoviesList = ({ movies, location }) => {\n  return (\n    <ul className={m.moviesList}>\n      {movies.map(({ id, poster_path, title, release_date }) => (\n        <li key={id} className={m.item}>\n          <Link\n            to={{\n              pathname: `/movies/${id}`,\n              state: { from: location },\n            }}\n          >\n            <MoviePreview\n              poster_path={poster_path}\n              title={title}\n              release_date={release_date}\n            />\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default withRouter(MoviesList);\n// Саша Репета для чего-то использовал User snippet reexport (посмотреть)\n\n// 52. переиспользуемый компонент MoviesList -> 45. MoviesPageView\n\n// 53. 3 пропа передаются только тому компоненту, который рендерится с помощью Route\n// --- в противном случае нужен {withRouter} (ф-ция или компонент высшего порядка? компонент-обёртка)\n// --- при экспорте вызывается как ф-ция с ссылкой на основную ф-цию withRouter(MoviesList)\n// --- сначала withRouter обворачивает нашу ф-цию, а потом под капотом в неё возвращает пропы, т.е. в HomePageView и MoviesPageView рендерится не MoviesList, а компонент зарендеренный withRouter с таким же именем MoviesList\n// 54. т.к. передаются разные url, нужно подготовить исходя из источника\n// --- вытягиваем его из match и вставляем динамически\n// --- или в нашем случае, т.к. постоянно переходим по одному адресу, жестко его прописать в Link to={/movies/}\n// --- withrouter в таком случае не нужен\n('---');\n// 55. делаем превьюшки фильмов -> MoviePreview\n// --- импортируем и рендерим в ссылку компонент превьюшки фильма\n// --- распыляем в него проп movie со всеми пропсами\n// --- но лучше кидать конкретные пропсы, а не все вподряд (так их видно конкретно и меньше)\n('---');\n// 58. в Link to= можно передать не только строку, но и объект настроек (props.location) {pathname: `/books/${id}`}\n// --- можно так же передавать state с информацией. этой информацией будет весь объект текущей локации location\n// --- state: {from: location} - проп, принятый {параметрах}, а чтоб он принялся нужен withRouter\n// --- теперь видим в location.state.from.pathname запись последнего url -> MovieDetailsPageView\n","import React, { Component } from 'react';\n// import { withRoutetr } from 'react-router-dom';\nimport Axios from 'axios';\nimport MoviesList from '../components/MoviesList';\nimport m from './MoviesPageView.module.css';\n\nclass HomePageView extends Component {\n  state = {\n    movies: [],\n  };\n\n  async componentDidMount() {\n    const { API, mainUrl } = this.props;\n    // console.log(this.props);\n\n    const response = await Axios.get(\n      `${mainUrl}/trending/movie/week?api_key=${API}`,\n    );\n    // console.log(response.data.results);\n\n    this.setState({ movies: response.data.results });\n\n    // if (prevState.movies !== this.state.movies) {    ша (зкумЫефеуюьщмшуы !== ершыюыефеуюьщмшуы) Х\n    localStorage.removeItem('movies');\n    localStorage.removeItem('formValue');\n    // }    Ъ\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={m.container}>\n        <h1 className={m.headBlock}>Trending today</h1>\n        <div>\n          <MoviesList movies={movies} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HomePageView;\n\n// 40. переносим сюда весь код из MoviesPageView, т.к. это должна быть домашняя страница\n// --- меняем, где нужно ссылки и адреса с MoviesPageView на HomePageView\n// --- в Link нужно добавить \"movies\" потому что в match.url уже не \"/movies\", а просто \"/\"\n// --- API выносим в App и передаём сюда пропсом\n// 47. переиспользуем компонент MoviesList закидывая в него такие же пропсы как и в MoviesPageView, но с другим пропсом url={}\n// 51. удаляем данные в сторэдже\n","import React, { Component } from 'react';\n// import { Route } from 'react-router-dom';\nimport Axios from 'axios';\nimport MoviesList from '../components/MoviesList';\n\nimport m from './MoviesPageView.module.css';\n\nclass MoviesPageView extends Component {\n  state = {\n    formValue: '',\n    movies: [],\n    status: 'idle',\n  };\n\n  componentDidMount() {\n    const moviesList = localStorage.getItem('movies');\n    const formValueFromStorage = localStorage.getItem('formValue');\n    const parsedMovies = JSON.parse(moviesList);\n    const parsedFormValue = JSON.parse(formValueFromStorage);\n\n    if (parsedMovies) {\n      this.setState({ movies: parsedMovies });\n      this.setState({ formValue: parsedFormValue });\n    }\n  }\n\n  async componentDidUpdate() {\n    const { API, mainUrl } = this.props;\n    const { formValue, status } = this.state;\n\n    if (status === 'pending' && formValue.length !== 0) {\n      const searchQuery = await Axios.get(\n        `${mainUrl}/search/movie?api_key=${API}&language=en-US&query=${formValue}&page=1&include_adult=false`,\n      );\n\n      this.setState({\n        movies: searchQuery.data.results,\n        status: 'resolved',\n        // formValue: '',\n      });\n\n      localStorage.setItem('movies', JSON.stringify(searchQuery.data.results));\n      localStorage.setItem('formValue', JSON.stringify(formValue));\n    }\n  }\n\n  handleChange = e => {\n    const { value } = e.currentTarget;\n\n    this.setState({ formValue: value.toLowerCase() });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    // const { formValue } = this.state;\n\n    this.setState({\n      status: 'pending',\n    });\n  };\n\n  handleClear = () => {\n    this.setState({ formValue: '', movies: [], status: 'idle' });\n    localStorage.removeItem('movies');\n    localStorage.removeItem('formValue');\n  };\n\n  render() {\n    const { movies } = this.state;\n    // const { url, path } = this.props.match;\n    return (\n      <div className={m.container}>\n        <div className={m.headBlock}>\n          <form className={m.formBar} onSubmit={this.handleSubmit}>\n            <button type=\"button\" onClick={this.handleClear}>\n              Clear\n            </button>\n\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={this.state.formValue}\n              onChange={this.handleChange}\n            />\n\n            <button type=\"submit\">Search</button>\n          </form>\n        </div>\n\n        <MoviesList movies={movies} />\n      </div>\n    );\n  }\n}\nexport default MoviesPageView;\n\n// status:\n// --- 'idle', - простаивание\n// --- 'pending', - ожидание\n// --- 'resolved', - разрешение\n// --- 'rejected' - отклонение\n('---');\n// 16. Для запроса нам нужен class и state для записи\n// 17. Для запросов импортируем Axios и делаем запрос, когда наш компонент маунтится (нажимаем на ссылку => меняется url в адресной строке => BrowserRouter реагирует и вызывает (маунтит) наш компонент MoviesPageView)\n// 18. В консоли видим результат запроса, записываем массив фильмов в state (каждый раз заново, не от предыдущего)\n// 19. Рендерим разметку для списка книг, достаём фильмы из стейта и мапим, вставляем id в <li> и рендерим title каждой книги\n('---');\n// 20. Теперь делаем встроенную навигацию - при нажарии на название (превью) фильма из общего списка, нас должно перекидывать на детальное описание фильма\n// 21. Нам нужно из названия сделать ссылку, но чтоб страница не перезагружалась - это { Link }, импортируем обворачиваем в него наши title\n// 22. В проп to=\"\" нужно вставить не статический, а динамический адрес, а чтоб у каждой книги был свой - определителем будет id\n('---');\n// 23. Использование во вложенной навигации постоянно в to= /movies - это антипаттерн магических строк, это плохо, потому что /movies уже используется под основную навигацию. Когда Route path=\"\" совпадает с текущим url (pathname)? то зарендеренный компонент (например наш MoviesPageView) получает от react-router три дополнительных пропса:\n// - history (объект для работы с историей)\n// - location (обьект, описывающий текущий путь в адресной строке, url)\n// --- hash: \"\" (описывает якорь)\n// --- key: \"234h4j\" (ID записи в истории)\n// --- pathname: \"/movies\" (тот, что мы пишем в рауте)\n// --- search: \"\" (query-стрим)\n// --- state: \"\"\n// - match (инфа от совпадении текущего маршрута с url)\n// --- isExact: true (если совпал)\n// --- params: {}\n// --- path: \"/movies\" (шаблон, на который зарендерился текущий раут, используем для создания вложенных маршрутов)\n// --- url: \"/movies\" (то, что записано в адресной строке, используем для создания вложенной навигации)\n\n// 24. консолим этот url (this.props.match.url) и смотрим, что он сходится с нашим to={/movies}  (или смотрим в React Tools - Components)\n// 25. поэтому мы можем вместо статической записи вставить наш динамический проп\n('---');\n// Теперь нам нужно сделать компонент, который будет рендериться на отдельный фильм - это отдельная страница MovieDetailsPageView\n('---');\n// 40. переносим весь код из MoviesPageView в HomePageView, т.к. это должна быть страница с формой поиска\n// 41. делаем форму для поиска фильмов по ключевому слову\n// --- форма с onSubmit и без label\n// --- input с type, name, value, onChange\n// ------ value должно отображать то, что записывается в state\n// ------ onChange должен вызывать метод handleChange, который\n// --- кнопка submit\n// 42. handleChange записывает в state значение {value} (с нижним регистром) в событии e.currentTarget\n// 43. handleSubmit должен иметь неперегружайку e.preventDefault();\n// --- переписывает статус на одидающий\n// 44. Т.к. у нас state перезаписывается каждый раз при изменениях в форме, то для запроса нужно использовать componentDidUpdate, потому что только в этом случае будет запрос последних изменений в форме\n// --- при componentDidUpdate нужно обязательно задать условие if () иначе цикличность\n// --- при смене статуса делаем запрос\n// --- меняем статус на подтверждённый\n// --- пишем ответ в state.movies\n// --- очищаем форму\n// -> App\n('---');\n// -> 52. MoviesList\n// 45. рендерим с пропами <MoviesList movies={this.state.movies} url={this.props.match.url} />\n// 46. переделываем на внутреннюю маршрутизацию Route\n// --- в path мы используем динамику, но не match.url, а match.path\n// 47. переиспользуем компонент MoviesList закидывая в него такие же пропсы как и в MoviesPageView, но с другим пропсом url={}\n// --- для законсоливания данных, можно использовать по данным в state или props метод .find()\n('КНОПКА НАЗАД');\n// 48. используем localStorage\n// --- условия те же, что и при запросе\n// --- при апдейте записываем в сторэдж this.state.movies и this.state.formValue\n// --- при маунте достаём из сторэджа и парсим\n// --- при условии наличия парса сетим по местам\n\n('КНОПКА CLEAR');\n// 50. удаляем данные в сторэдже и стейтим дэфолтные значения -> HomePageView\n","import React, { Component } from 'react';\nimport m from './Cast.module.css';\n\nclass Cast extends Component {\n  render() {\n    const { cast } = this.props;\n\n    return (\n      <>\n        <ul className={m.cast}>\n          {cast.map(({ id, original_name, profile_path }) => (\n            <li className={m.castItem} key={id}>\n              <img\n                className={m.pic}\n                src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                alt=\"\"\n              />\n              <p className={m.name}>{original_name}</p>\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n}\n\nexport default Cast;\n\n// 37. рендерим пришедший пропс (почему-то не работает с ф-цией, а только с классом), повторяем в Review\n","import React, { Component } from 'react';\n\nclass Reviews extends Component {\n  render() {\n    const { reviews } = this.props;\n\n    // console.log(reviews);\n    return (\n      <>\n        {reviews.length === 0 && \"We don't have any reviews for this movie\"}\n\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h3>{`Author: ${author}`}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n}\n\nexport default Reviews;\n\n// 38. рендерим пришедший пропс (почему-то не работает с ф-цией, а только с классом)\n// 39. теперь страница HomePageView\n","import React, { Component } from 'react';\nimport { NavLink, Route } from 'react-router-dom';\nimport Cast from '../components/Cast';\nimport Reviews from '../components/Reviews';\nimport Axios from 'axios';\nimport routes from '../routes';\n\nimport m from './MovieDetailsPageView.module.css';\n\nclass MovieDetailsPageView extends Component {\n  state = {\n    title: '',\n    genres: [],\n    overview: '',\n    release_date: '',\n    vote_average: '',\n    poster_path: '',\n    cast: [],\n    reviews: [],\n  };\n\n  async componentDidMount() {\n    const { API, mainUrl } = this.props;\n    const { movieId } = this.props.match.params;\n    const creditsAndReviews = 'append_to_response=credits,reviews';\n\n    const response = await Axios.get(\n      `${mainUrl}/movie/${movieId}?api_key=${API}&${creditsAndReviews}&language=en-US`,\n    );\n\n    // console.log(response.data);\n    // console.log(response.data.reviews.results);\n\n    this.setState({\n      ...response.data,\n      poster_path:\n        'https://image.tmdb.org/t/p/w300' + response.data.poster_path,\n      cast: response.data.credits.cast,\n      reviews: response.data.reviews.results,\n    });\n  }\n\n  handleGoBack = () => {\n    const { history, location } = this.props;\n\n    if (location.state && location.state.from) {\n      return history.push(location.state.from);\n    }\n\n    history.push(routes.movies);\n\n    // history.push(location?.state?.from || routes.movies);\n  };\n\n  render() {\n    const {\n      title,\n      release_date,\n      genres,\n      poster_path,\n      overview,\n      vote_average,\n      cast,\n      reviews,\n    } = this.state;\n    const { movies } = this.props;\n    const { url, path } = this.props.match;\n    const imgUrl = poster_path;\n    const voteAverageInPercent = vote_average * 10 + '%';\n    // console.log(release_date.slice(0, 4));\n    // console.log(`send:`, cast);\n    // console.log(this.props.location.state.from);\n    return (\n      <>\n        <button\n          className={m.backBtn}\n          type=\"button\"\n          onClick={this.handleGoBack}\n          movies={movies}\n        >\n          Назад\n        </button>\n        {title && (\n          <div>\n            <div className={m.MovieDetails}>\n              <img src={`${imgUrl}`} alt={`poster ${title}`} />\n              <div className={m.description}>\n                <h1>{`${title} (${\n                  release_date ? release_date.slice(0, 4) : 'Coming soon'\n                })`}</h1>\n                {vote_average ? (\n                  <p>{`User score: ${voteAverageInPercent}`}</p>\n                ) : (\n                  ''\n                )}\n\n                {overview && <h3>Overview</h3>}\n                <p>{overview}</p>\n\n                <h4>Genres</h4>\n                <ul className={m.genres}>\n                  {genres.map(({ id, name }) => (\n                    <li key={id}>{name}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n\n            <hr />\n\n            <p>Addidition information</p>\n\n            <ul>\n              <li>\n                <NavLink\n                  to={`${url}/cast`}\n                  className=\"NavLink\"\n                  activeClassName=\"NavLink--active\"\n                >\n                  Cast\n                </NavLink>\n              </li>\n              <li>\n                <NavLink\n                  to={`${url}/reviews`}\n                  className=\"NavLink\"\n                  activeClassName=\"NavLink--active\"\n                >\n                  Reviews\n                </NavLink>\n              </li>\n            </ul>\n\n            <hr />\n\n            <Route\n              path={`${path}/cast`}\n              render={props => {\n                return <Cast {...props} cast={cast} />;\n              }}\n            />\n            <Route\n              path={`${path}/reviews`}\n              render={props => {\n                return <Reviews {...props} reviews={reviews} />;\n              }}\n            />\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default MovieDetailsPageView;\n\n// 26. создаём class. Рендерить этот компонент мы хотим после (вместо) списка всех видео, после добавлению к адресу id выбранного фильма, например /books/:bookId - это просто строка, сама по себе ничего не означающая, \":\" значит динамический параметр, означает, что реагировать на всё, что будет после /books/. Эту строку адреса мы так же можем записать в раут App...\n\n// 28. переходим на нашей страничке в Movies и смотрим в тулзы, видим, что зарендерен MoviesPageView, смотрим в его проп match и видим, что isExact: true, а path и url совпадают, но это не значит, что они одинаковые...\n// переходим на страницу одного фильма, смотрим туда же на пропы и видим, что isExact: true, а path и url разные.\n// смотрим на проп params и видим, что у него идёт определение {path: url}, это как раз потому что в нашем рауте в path стоит динамический параметр \":\", означающий, что запись после него movieId - это лишь переменная.\n// 29. поэтому, чтобы при переходе на страницу одной книги нам сразу писался идентификатор фильма, мы може писать в заглавии {this.props.match.params.movieId}\n// доступ к идентификатору нужен не для названия, а для нового запроса к фильму по id? потому что на эту страницу мы можем перейти не только из /movies, но и набрав вручную, а если до этого небыло запроса на все книги, то и из state в /movies нечего брать\n// --- при маунте можем консолить пропсы для наглядности\n// 30. делаем запрос при маунте, где параметром книги делаем наш проп с id. Поэтому тут class.\n// 31. приходит объект со свойством data и у того объект свойств. Все свойства нам не нужны, поэтому мы можем выбрать необходимые, записать их в стейт и распылить нужный ответ в стейт.\n// 32. Рендерим разметку:\n// --- деструктуризируем стейт, вытягиваем свойства\n// --- деструктуризируем значение {movieId} из пропса this.props.match.params\n// ---находим в доках правильный запрос для картинок и присваеваем его переменной imageUrl\n// --- прописываем разметку для названия, года, рейтинга, описания, постера и жанров\n('---');\n// теперь делаем вложенный маршрут - это когда на той же странице не переходя на другую у нас открывается что-то, в данном случае - это информации о актёрском составе и обзоры. Раут - это просто компонент, мы можем его вставлять в рендере другого компонента. Так как у нас только кусочек страницы, то мы можем делать не view, а просто компонент\n// 33. импортируем NavLink, обворачиваем в него Cast и Review и прописываем to=\"/movies/:movieId/cast\" и \".../review\". В to= первую часть url нужно тоже писать динамикой, как мы это делали в MoviesPageView to={`${this.props.match.url}/cast`}\n// 34. для добавлеия вложенного свойства Cast в запросе нужно добавить не _embed=credits (_expand=credits), а дополнительный параметр, указаный в доках на сайте &append_to_response=credits после. Смотрим в тулзах на компонент MovieDetailsPageView, на его state.\n// 35. нам нужно передать из MovieDetailsPageView в Cast id фильма, сделать это можно через СПЕЦИАЛЬНЫЙ проп render={props => <Cast {...props} /> }. Передавать нужно ф-цию, в которую будут приходить пропы раутера (history, location, match), они передаются автоматически, если мы передаём через component={}, а через рендер нужно вручную, на выходе наш тег с компонентом и в него распыляем эти пропсы и наш список Cast из стейта.\n// 36. повторяем с Review и переходим к этим компонентам\n('Кнопка НАЗАД');\n// 57. добавляем кнопку\n// --- смотрим на props.history.push и .replace - нам нужно записать новую запись, взятую из истории\n// --- пример с onClick={() => this.props.history.push('/')}\n// --- надо рауту MovieDetailsPageView сказать с какого url мы пришли? -> MoviesList\n// 59. проверяем с какого url приходим console.log(this.props.location.state.from);\n// --- прописываем в onClick={() => this.props.history.push(this.props.location.state.from)}\n// --- dsyjcbv это в отдельный метод handleGoBack\n// 60. что делать, если пользователь зашел по конечному адресу с пустой страницы?\n// --- в таком случае будет location.state: undefined\n// --- в handleGoBack пушим при выполнении условия проверки на if(location.state && location.state.from)\n// --- если условие не выполняется, то перекидываем на страницу запроса (через готовый импортированный раут)\n// --- так же есть современный метод проверки вложенных свойств с помощью оператора \"?.\", но в результируещем бандле rjд будет больше, поэтому пока новые технологии не вошли в обиход, лучше писать по олдскульному\n","import React from 'react';\nimport m from './MoviesPageView.module.css';\n\nconst NotFoundView = () => {\n  return <h1 className={m.headBlock}>Sorry, but this page not found</h1>;\n};\n\nexport default NotFoundView;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport AppBar from './components/AppBar';\nimport HomePageView from './views/HomePageView';\nimport MoviesPageView from './views/MoviesPageView';\nimport MovieDetailsPageView from './views/MovieDetailsPageView';\nimport NotFoundView from './views/NotFoundView';\n\nimport routes from './routes';\n\nconst API = '4f24a465004dec8d1f65f162bb769c3a';\nconst mainUrl = 'https://api.themoviedb.org/3';\n\nconst App = () => (\n  <>\n    <AppBar />\n\n    <Switch>\n      <Route\n        exact\n        path={routes.home}\n        render={props => {\n          return <HomePageView {...props} API={API} mainUrl={mainUrl} />;\n        }}\n      />\n      <Route\n        exact\n        path={routes.movies}\n        render={props => {\n          return <MoviesPageView {...props} API={API} mainUrl={mainUrl} />;\n        }}\n      />\n      <Route\n        path={routes.movieDetails}\n        render={props => {\n          return (\n            <MovieDetailsPageView {...props} API={API} mainUrl={mainUrl} />\n          );\n        }}\n      />\n      <Route component={NotFoundView} />\n    </Switch>\n  </>\n);\n\n// рефакторинг\n// редирект (prop.history и )\n// разделение кода (причёсывание)\n\n// https://developers.themoviedb.org/3/trending/get-trending - список самых популярных фильмов на сегодня для создания коллекции на главной странице.\n// /trending/{movie}/{week}\n\n// https://developers.themoviedb.org/3/search/search-movies - поиск кинофильма по ключевому слову на странице фильмов.\n// https://developers.themoviedb.org/3/movies/get-movie-details - запрос полной информации о фильме для страницы кинофильма.\n// https://developers.themoviedb.org/3/movies/get-movie-credits - запрос информации о актёрском составе для страницы кинофильма.\n// https://developers.themoviedb.org/3/movies/get-movie-reviews - запрос обзоров для страницы кинофильма.\n\nexport default App;\n\n// нам нужно спроэктировать приложение, сделать маршруты, создаём ф-цию\n// 4. импорт { Route }\n// 5. рендерим раут передавая в него адрес и компонент как ссылку (страница вьюха)\n// 6. создаём вьюху HomePageView, импортируем её\n// 7. пишем в проп раута component = {} и соответствующий ему path=\"\"\n// 8. то же самое делаем с остальными вьюхами\n// 9. exact используем там, где нужно точное совпадение, потому что рендер будет даже там, где совпадение path минимальное (HomePageView зарендерится и при /movies, потому что совпадает \"/\")\n('---');\n// Cейчас мы можем вводитьадреса только руками, поэтому нам нужно сделатьнормальную навигацию. Если делать ссылку типа <a href=\"\">, то будет перезагрузка браузера, нам это не нужно. Нам нужно только переписать url в адресной строке на тот, который мы укажем, а потом BrouserRouter увидит изменение и перерендерит страницу.\n\n// 10. Импортим Router.Link или { Link }, закинуть в рендер (можно в отдельные <li>), в проп to=\"\" продублировать наши адреса и подписать их между тегами <Link></Link>, он под капотом сам отрендерит теги <a href=\"\">, но изменит только адресную строку без перезагрузки страницы.\n// 11. Если перейдём на (пропишем) несуществующий путь, то нужно отрендерить отдельный компонент, создаём NotFoundView. Если не передать в него путь, то он будет рендериться всегда (если не передать путь во всех раутах, то все компоненты будут рендериться всегда). Поэтому ставим Switch, чтобы выбирался только один из.\n// 12. Импортируем Router.Switch или { Switch }, обворачиваем им все наши рауты\n\n// 13. Для стилизации вместо Link используем NavLink, он использует 2 пропа для объекта инлайн-стилей (создаём const styles = {}) - базовый и активный, но мы будем использовать module.css, поэтому используем className и activeClassName, а styles удаляем.\n// 14. Проверяем применение классов в Elements и видим, что activeClassName применяется к Home постоянно - это потому что как и в случае с Route path=\"/\", так и в NavLink to=\"/\" нужно использовать exact там, где необходимо для точного совпадения.\n\n// 15. Для общих свойств (например один автор нескольких книг) есть специальные параметры\n// /authors?_embed=books - объект авторов и свойство с массивом объектов книг (встраивает)\n// /books?_expand=author - объект книг и свойство с объектом автора (расширяет)\n('---');\n// Теперь нам нужно сделать запрос на бекенд при нажатии на ссылку, начнём с коллекции всех фильмов в MoviesPageView\n('---');\n// 27. добавляем раут для MovieDetailsPageView (если ещё не добавили) и exact, чтоб не смешивался, либо пишем эту строку ниже остальных, если нельзя exact, потому что Switch работает сверху вниз. => MovieDetailsPageView\n('---');\n// --- API и адрес запроса mainUrl прописываем в переменные и передаём пропсами во все рауты\n('---');\n// status:\n// --- 'idle', - простаивание\n// --- 'pending', - ожидание\n// --- 'resolved', - разрешение\n// --- 'rejected' - отклонение\n\n('Разделение кода');\n// 48. создаём и импортируем route.js для хранения маршрутов\n// --- прописываем динамику в Route path=\"{} и NavLink to={}\n// --- делаем AppBar и переносим туда нужные линки\n// --- импортируем AppBar и рендерим выше всех\n// -> AppBar\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './styles/base.module.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// 1. установили react-router-dom\n// 2. импорт  React.BrowserRouter или  { BrowserRouter } он следит за адресной строкой, при её изменении будет делать то, что мы скажем\n// 3. обернули в него наше приложение\n// переходим в App\n('---');\n// пропсы лучше не распылять, а передавать конкретно\n// жестко прописали адрес в Link to, потому что переходим по одному и тому же (при разных пропах url)\n"],"sourceRoot":""}