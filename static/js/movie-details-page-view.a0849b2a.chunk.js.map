{"version":3,"sources":["services/fetch-api.jsx","views/MovieDetailsPageView.module.css","views/MovieDetailsPageView.jsx"],"names":["fetchMovie","formValue","slug","apiKey","baseUrl","Axios","get","module","exports","Cast","lazy","Reviews","MovieDetailsPageView","state","title","genres","overview","release_date","vote_average","poster_path","cast","reviews","handleGoBack","props","history","location","from","push","routes","movies","a","movieId","this","match","params","response","posterPath","data","setState","credits","results","url","path","imgUrl","voteAverageInPercent","className","m","backBtn","type","onClick","MovieDetails","src","alt","description","slice","map","id","name","to","activeClassName","render","Component"],"mappings":"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","file":"static/js/movie-details-page-view.a0849b2a.chunk.js","sourcesContent":["import Axios from 'axios';\n\nconst fetchMovie = (formValue, slug) => {\n  const apiKey = '4f24a465004dec8d1f65f162bb769c3a';\n  const baseUrl = 'https://api.themoviedb.org/3';\n  const creditsAndReviews = 'append_to_response=credits,reviews';\n\n  if (formValue) {\n    const fetch = Axios.get(\n      `${baseUrl}/search/movie?api_key=${apiKey}&language=en-US&query=${formValue}&page=1&include_adult=false`,\n    );\n\n    return fetch;\n  }\n\n  if (slug) {\n    const fetch = Axios.get(\n      `${baseUrl}/movie/${slug}?api_key=${apiKey}&${creditsAndReviews}&language=en-US`,\n    );\n\n    return fetch;\n  }\n\n  const fetch = Axios.get(`${baseUrl}/trending/movie/week?api_key=${apiKey}`);\n\n  return fetch;\n};\n\nexport default fetchMovie;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MovieDetails\":\"MovieDetailsPageView_MovieDetails__w972_\",\"description\":\"MovieDetailsPageView_description__cGngn\",\"genres\":\"MovieDetailsPageView_genres__2ywdv\",\"backBtn\":\"MovieDetailsPageView_backBtn__2WDeE\"};","import React, { Component, Suspense, lazy } from 'react';\nimport { NavLink, Route } from 'react-router-dom';\n// import Axios from 'axios';\nimport fetchMovie from '../services/fetch-api';\nimport routes from '../routes';\n\nimport m from './MovieDetailsPageView.module.css';\n\nconst Cast = lazy(() =>\n  import('../components/Cast' /* webpackChunkName: \"cast\" */),\n);\n\nconst Reviews = lazy(() =>\n  import('../components/Reviews' /* webpackChunkName: \"reviews\" */),\n);\n\nclass MovieDetailsPageView extends Component {\n  state = {\n    title: '',\n    genres: [],\n    overview: '',\n    release_date: '',\n    vote_average: '',\n    poster_path: '',\n    cast: [],\n    reviews: [],\n  };\n\n  async componentDidMount() {\n    const { movieId } = this.props.match.params;\n\n    const response = await fetchMovie(false, movieId);\n    // console.log(response.data.credits);\n    // console.log(response.data.reviews.results);\n\n    const posterPath =\n      'https://image.tmdb.org/t/p/w300' + response.data.poster_path;\n\n    this.setState({\n      ...response.data,\n      poster_path: posterPath,\n      cast: response.data.credits.cast,\n      reviews: response.data.reviews.results,\n    });\n  }\n\n  handleGoBack = () => {\n    const { history, location } = this.props;\n\n    if (location.state && location.state.from) {\n      return history.push(location.state.from);\n    }\n\n    history.push(routes.movies);\n\n    // history.push(location?.state?.from || routes.movies);\n  };\n\n  render() {\n    const {\n      title,\n      release_date,\n      genres,\n      poster_path,\n      overview,\n      vote_average,\n      cast,\n      reviews,\n    } = this.state;\n    const { movies } = this.props;\n    const { url, path } = this.props.match;\n    const imgUrl = poster_path;\n    const voteAverageInPercent = vote_average * 10 + '%';\n    // console.log(release_date.slice(0, 4));\n    // console.log(`send:`, cast);\n    // console.log(this.props.location.state.from);\n    return (\n      <>\n        <button\n          className={m.backBtn}\n          type=\"button\"\n          onClick={this.handleGoBack}\n          movies={movies}\n        >\n          Назад\n        </button>\n\n        {title && (\n          <div>\n            <div className={m.MovieDetails}>\n              <img src={`${imgUrl}`} alt={`poster ${title}`} />\n              <div className={m.description}>\n                <h1>{`${title} (${\n                  release_date ? release_date.slice(0, 4) : 'Coming soon'\n                })`}</h1>\n                {vote_average ? (\n                  <p>{`User score: ${voteAverageInPercent}`}</p>\n                ) : (\n                  ''\n                )}\n\n                {overview && <h3>Overview</h3>}\n                <p>{overview}</p>\n\n                <h4>Genres</h4>\n                <ul className={m.genres}>\n                  {genres.map(({ id, name }) => (\n                    <li key={id}>{name}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n            <hr />\n            <p>Addidition information</p>\n            <ul>\n              <li>\n                <NavLink\n                  to={`${url}/cast`}\n                  className=\"NavLink\"\n                  activeClassName=\"NavLink--active\"\n                >\n                  Cast\n                </NavLink>\n              </li>\n              <li>\n                <NavLink\n                  to={`${url}/reviews`}\n                  className=\"NavLink\"\n                  activeClassName=\"NavLink--active\"\n                >\n                  Reviews\n                </NavLink>\n              </li>\n            </ul>\n            <hr />\n            <Suspense>\n              <Route\n                path={`${path}/cast`}\n                render={props => {\n                  return <Cast {...props} cast={cast} />;\n                }}\n              />\n              <Route\n                path={`${path}/reviews`}\n                render={props => {\n                  return <Reviews {...props} reviews={reviews} />;\n                }}\n              />\n            </Suspense>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default MovieDetailsPageView;\n\n// 26. создаём class. Рендерить этот компонент мы хотим после (вместо) списка всех видео, после добавлению к адресу id выбранного фильма, например /books/:bookId - это просто строка, сама по себе ничего не означающая, \":\" значит динамический параметр, означает, что реагировать на всё, что будет после /books/. Эту строку адреса мы так же можем записать в раут App...\n\n// 28. переходим на нашей страничке в Movies и смотрим в тулзы, видим, что зарендерен MoviesPageView, смотрим в его проп match и видим, что isExact: true, а path и url совпадают, но это не значит, что они одинаковые...\n// переходим на страницу одного фильма, смотрим туда же на пропы и видим, что isExact: true, а path и url разные.\n// смотрим на проп params и видим, что у него идёт определение {path: url}, это как раз потому что в нашем рауте в path стоит динамический параметр \":\", означающий, что запись после него movieId - это лишь переменная.\n// 29. поэтому, чтобы при переходе на страницу одной книги нам сразу писался идентификатор фильма, мы може писать в заглавии {this.props.match.params.movieId}\n// доступ к идентификатору нужен не для названия, а для нового запроса к фильму по id? потому что на эту страницу мы можем перейти не только из /movies, но и набрав вручную, а если до этого небыло запроса на все книги, то и из state в /movies нечего брать\n// --- при маунте можем консолить пропсы для наглядности\n// 30. делаем запрос при маунте, где параметром книги делаем наш проп с id. Поэтому тут class.\n// 31. приходит объект со свойством data и у того объект свойств. Все свойства нам не нужны, поэтому мы можем выбрать необходимые, записать их в стейт и распылить нужный ответ в стейт.\n// 32. Рендерим разметку:\n// --- деструктуризируем стейт, вытягиваем свойства\n// --- деструктуризируем значение {movieId} из пропса this.props.match.params\n// ---находим в доках правильный запрос для картинок и присваеваем его переменной imageUrl\n// --- прописываем разметку для названия, года, рейтинга, описания, постера и жанров\n('---');\n// теперь делаем вложенный маршрут - это когда на той же странице не переходя на другую у нас открывается что-то, в данном случае - это информации о актёрском составе и обзоры. Раут - это просто компонент, мы можем его вставлять в рендере другого компонента. Так как у нас только кусочек страницы, то мы можем делать не view, а просто компонент\n// 33. импортируем NavLink, обворачиваем в него Cast и Review и прописываем to=\"/movies/:movieId/cast\" и \".../review\". В to= первую часть url нужно тоже писать динамикой, как мы это делали в MoviesPageView to={`${this.props.match.url}/cast`}\n// 34. для добавлеия вложенного свойства Cast в запросе нужно добавить не _embed=credits (_expand=credits), а дополнительный параметр, указаный в доках на сайте &append_to_response=credits после. Смотрим в тулзах на компонент MovieDetailsPageView, на его state.\n// 35. нам нужно передать из MovieDetailsPageView в Cast id фильма, сделать это можно через СПЕЦИАЛЬНЫЙ проп render={props => <Cast {...props} /> }. Передавать нужно ф-цию, в которую будут приходить пропы раутера (history, location, match), они передаются автоматически, если мы передаём через component={}, а через рендер нужно вручную, на выходе наш тег с компонентом и в него распыляем эти пропсы и наш список Cast из стейта.\n// 36. повторяем с Review и переходим к этим компонентам\n('Кнопка НАЗАД');\n// 57. добавляем кнопку\n// --- смотрим на props.history.push и .replace - нам нужно записать новую запись, взятую из истории\n// --- пример с onClick={() => this.props.history.push('/')}\n// --- надо рауту MovieDetailsPageView сказать с какого url мы пришли? -> MoviesList\n// 59. проверяем с какого url приходим console.log(this.props.location.state.from);\n// --- прописываем в onClick={() => this.props.history.push(this.props.location.state.from)}\n// --- dsyjcbv это в отдельный метод handleGoBack\n// 60. что делать, если пользователь зашел по конечному адресу с пустой страницы?\n// --- в таком случае будет location.state: undefined\n// --- в handleGoBack пушим при выполнении условия проверки на if(location.state && location.state.from)\n// --- если условие не выполняется, то перекидываем на страницу запроса (через готовый импортированный раут)\n// --- так же есть современный метод проверки вложенных свойств с помощью оператора \"?.\", но в результируещем бандле rjд будет больше, поэтому пока новые технологии не вошли в обиход, лучше писать по олдскульному\n// -> App\n\n('Suspense, lazy - 01:13:00');\n// 63. import {Suspense, lazy}\n// --- удаляем статические импорты и добавляем lazy()\n// --- обворачивать в <Suspense> можно рауты или конкретно добавляемые компоненты\n\n('Slug');\n// меняем проп movieId на { slug } = this.props.match.params;\n// меняем в запросе movieId на slug\n\n// note // ! проверить routes.cast и routes.review\n"],"sourceRoot":""}