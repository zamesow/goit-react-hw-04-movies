{"version":3,"sources":["App.module.css","components/Cast/Cast.module.css","views/MovieDetailsPageView.module.css","styles/base.module.css","views/HomePageView.jsx","components/SearchMovies/SearchMovies.jsx","views/MoviesPageView.jsx","components/Cast/Cast.jsx","components/Reviews/Reviews.jsx","views/MovieDetailsPageView.jsx","views/NotFoundView.jsx","App.jsx","index.jsx"],"names":["module","exports","HomePageView","state","movies","a","this","props","API","fetch","Axios","get","response","setState","data","results","url","match","className","map","movie","to","id","title","Component","SearchMovies","MoviesPageView","formValue","searchFilms","status","handleChange","e","value","currentTarget","toLowerCase","handleSubmit","preventDefault","searchQuery","console","log","onSubmit","type","name","onChange","Cast","cast","m","original_name","profile_path","castItem","pic","src","alt","reviews","author","content","MovieDetailsPageView","genres","overview","release_date","vote_average","poster_path","movieId","params","credits","imgUrl","voteAverageInPercent","MovieDetails","description","slice","genre","activeClassName","path","render","Reviews","NotFoundView","App","AppBar","exact","NavLink","active","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5f00986.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppBar\":\"App_AppBar__3bK5z\",\"NavLink\":\"App_NavLink__PAYqw\",\"active\":\"App_active__2_IIg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cast\":\"Cast_cast__2YBpA\",\"castItem\":\"Cast_castItem__3gBGL\",\"pic\":\"Cast_pic__3iC9w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MovieDetails\":\"MovieDetailsPageView_MovieDetails__1mE28\",\"description\":\"MovieDetailsPageView_description___9Pqn\",\"genres\":\"MovieDetailsPageView_genres__3XfqN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavLink\":\"base_NavLink__1yH4x\",\"NavLink--active\":\"base_NavLink--active__2er8W\"};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Axios from 'axios';\n\nclass HomePageView extends Component {\n  state = {\n    movies: [],\n  };\n\n  async componentDidMount() {\n    const { API, fetch } = this.props;\n    // console.log(this.props);\n\n    const response = await Axios.get(\n      `${fetch}/trending/movie/week?api_key=${API}`,\n    );\n    // console.log(response.data.results);\n\n    this.setState({ movies: response.data.results });\n  }\n\n  render() {\n    const { movies } = this.state;\n    const { url } = this.props.match;\n    // console.log(url);\n    return (\n      <>\n        <div className=\"container-fluid\">\n          <h1>HomePage</h1>\n          <ul className=\"\">\n            {movies.map(movie => (\n              // eslint-disable-next-line react/prop-types\n              <li key={movie.id}>\n                <Link to={`${url}movies/${movie.id}`}>{movie.title}</Link>\n              </li>\n            ))}\n          </ul>\n          {/* <SearchMovies movies={this.state.movies} /> */}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default HomePageView;\n\n// 40. переносим сюда весь код из MoviesPageView, т.к. это должна быть домашняя страница\n// --- меняем, где нужно ссылки и адреса с MoviesPageView на HomePageView\n// --- в Link нужно добавить \"movies\" потому что в match.url уже не \"/movies\", а просто \"/\"\n// --- API выносим в App и передаём сюда пропсом\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SearchMovies = ({ movies, url }) => {\r\n  return (\r\n    <>\r\n      <h2>SearchMovies</h2>\r\n      <ul className=\"\">\r\n        {movies.map(({ id, title }) => (\r\n          <li key={id}>\r\n            <Link to={`${url}/${id}`}>{title}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* <Route path=\"/movie/:movieId\" render={props =>  {return {...props} } /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchMovies;\r\n","import React, { Component } from 'react';\n// import { Route } from 'react-router-dom';\nimport Axios from 'axios';\nimport SearchMovies from '../components/SearchMovies';\n\nclass MoviesPageView extends Component {\n  state = {\n    formValue: '',\n    searchFilms: '',\n    movies: [],\n    status: 'idle',\n  };\n\n  async componentDidUpdate() {\n    const { API, fetch } = this.props;\n    const { searchFilms, status } = this.state;\n    // const { filmQuery } = this.props;\n    if (status === 'pending') {\n      const searchQuery = await Axios.get(\n        `${fetch}/search/movie?api_key=${API}&language=en-US&query=${searchFilms}&page=1&include_adult=false`,\n      );\n\n      console.log(searchQuery.data.results);\n\n      this.setState({\n        movies: searchQuery.data.results,\n        status: 'resolved',\n      });\n    }\n  }\n\n  handleChange = e => {\n    const { value } = e.currentTarget;\n\n    this.setState({ formValue: value.toLowerCase() });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { formValue } = this.state;\n\n    // this.props.onSubmit(searchFilms);\n    this.setState({\n      searchFilms: formValue,\n      status: 'pending',\n      // formValue: '',\n    });\n  };\n\n  render() {\n    const { movies } = this.state;\n    const { url } = this.props.match;\n    return (\n      <>\n        <div className=\"container-fluid\">\n          <form className=\"code\" onSubmit={this.handleSubmit}>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={this.state.formValue}\n              onChange={this.handleChange}\n            />\n\n            <button type=\"submit\">Search</button>\n          </form>\n        </div>\n\n        <SearchMovies movies={movies} url={url} />\n\n        {/* <Route\n          path={`/movies&query=${searchFilms}`}\n          render={props => {\n            return <SearchMovies {...props} searchFilms={this.state.searchFilms} />;\n          }}\n        /> */}\n      </>\n    );\n  }\n}\n\nexport default MoviesPageView;\n\n// 16. Для запроса нам нужен class и state для записи\n// 17. Для запросов импортируем Axios и делаем запрос, когда наш компонент маунтится (нажимаем на ссылку => меняется url в адресной строке => BrowserRouter реагирует и вызывает (маунтит) наш компонент MoviesPageView)\n// 18. В консоли видим результат запроса, записываем массив фильмов в state (каждый раз заново, не от предыдущего)\n// 19. Рендерим разметку для списка книг, достаём фильмы из стейта и мапим, вставляем id в <li> и рендерим title каждой книги\n('---');\n// 20. Теперь делаем встроенную навигацию - при нажарии на название (превью) фильма из общего списка, нас должно перекидывать на детальное описание фильма\n// 21. Нам нужно из названия сделать ссылку, но чтоб страница не перезагружалась - это { Link }, импортируем обворачиваем в него наши title\n// 22. В проп to=\"\" нужно вставить не статический, а динамический адрес, а чтоб у каждой книги был свой - определителем будет id\n('---');\n// 23. Использование во вложенной навигации постоянно в to= /movies - это антипаттерн магических строк, это плохо, потому что /movies уже используется под основную навигацию. Когда Route path=\"\" совпадает с текущим url (pathname)? то зарендеренный компонент (например наш MoviesPageView) получает от react-router три дополнительных пропса:\n// - history (объект для работы с историей)\n// - location (обьект, описывающий текущий путь в адресной строке, url)\n// --- hash: \"\" (описывает якорь)\n// --- key: \"234h4j\" (ID записи в истории)\n// --- pathname: \"/movies\" (тот, что мы пишем в рауте)\n// --- search: \"\" (query-стрим)\n// --- state: \"\"\n// - match (инфа от совпадении текущего маршрута с url)\n// --- isExact: true (если совпал)\n// --- params: {}\n// --- path: \"/movies\" (шаблон, на который зарендерился текущий раут, используем для создания вложенных маршрутов)\n// --- url: \"/movies\" (то, что записано в адресной строке, используем для создания вложенной навигации)\n\n// 24. консолим этот url (this.props.match.url) и смотрим, что он сходится с нашим to={/movies}  (или смотрим в React Tools - Components)\n// 25. поэтому мы можем вместо статической записи вставить наш динамический проп\n('---');\n// Теперь нам нужно сделать компонент, который будет рендериться на отдельный фильм - это отдельная страница MovieDetailsPageView\n('---');\n// 40. переносим весь код из MoviesPageView в HomePageView, т.к. это должна быть страница с формой поиска\n// 41. делаем форму для поиска фильмов по ключевому слову\n// --- форма с onSubmit и без label\n// --- input с type, name, value, onChange\n// --- кнопка\n\n// status:\n// --- 'idle', - простаивание\n// --- 'pending', - ожидание\n// --- 'resolved', - разрешение\n// --- 'rejected' - отклонение\n","import React, { Component } from 'react';\nimport m from './Cast.module.css';\n\nclass Cast extends Component {\n  render() {\n    const { cast } = this.props;\n\n    return (\n      <>\n        <h1>Cast</h1>\n\n        <ul className={m.cast}>\n          {cast.map(({ id, original_name, profile_path }) => (\n            <li className={m.castItem} key={id}>\n              <img\n                className={m.pic}\n                src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                alt=\"\"\n              />\n              <p>{original_name}</p>\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n}\n\nexport default Cast;\n\n// 37. рендерим пришедший пропс (почему-то не работает с ф-цией, а только с классом), повторяем в Review\n","import React, { Component } from 'react';\n\nclass Cast extends Component {\n  render() {\n    const { reviews } = this.props;\n\n    // console.log(reviews);\n    return (\n      <>\n        {reviews && \"We don't have any reviews for this movie\"}\n\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h3>{`Author: ${author}`}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n}\n\nexport default Cast;\n\n// 38. рендерим пришедший пропс (почему-то не работает с ф-цией, а только с классом)\n// 39. теперь страница HomePageView\n","import React, { Component } from 'react';\nimport { NavLink, Switch, Route } from 'react-router-dom';\nimport Cast from '../components/Cast';\nimport Reviews from '../components/Reviews';\nimport Axios from 'axios';\n\nimport m from './MovieDetailsPageView.module.css';\n\n// const URL = 'https://api.themoviedb.org/3/movie';\nconst creditsAndReviews = 'append_to_response=credits,reviews';\n\nclass MovieDetailsPageView extends Component {\n  state = {\n    title: null,\n    genres: [],\n    overview: null,\n    release_date: '',\n    vote_average: null,\n    poster_path: '',\n    cast: [],\n    reviews: [],\n  };\n\n  async componentDidMount() {\n    const { API, fetch } = this.props;\n    const { movieId } = this.props.match.params;\n\n    const response = await Axios.get(\n      `${fetch}/movie/${movieId}?api_key=${API}&${creditsAndReviews}&language=en-US`,\n    );\n\n    // console.log(response.data);\n    // console.log(response.data.reviews.results);\n\n    this.setState({\n      ...response.data,\n      poster_path:\n        'https://image.tmdb.org/t/p/w300' + response.data.poster_path,\n      cast: response.data.credits.cast,\n      reviews: response.data.reviews.results,\n    });\n  }\n\n  render() {\n    const {\n      title,\n      release_date,\n      genres,\n      poster_path,\n      overview,\n      vote_average,\n      cast,\n      reviews,\n    } = this.state;\n    // const { movieId } = this.props.match.params;\n    const { url } = this.props.match;\n    const imgUrl = poster_path;\n    const voteAverageInPercent = vote_average * 10 + '%';\n    // console.log(release_date.slice(0, 4));\n    // console.log(`send:`, cast);\n\n    return (\n      <>\n        <div className={m.MovieDetails}>\n          <img src={`${imgUrl}`} alt={`poster ${title}`} />\n          <div className={m.description}>\n            <h1>{`${title} (${release_date.slice(0, 4)})`}</h1>\n            <p>{`User score: ${voteAverageInPercent}`}</p>\n\n            <h3>Overview</h3>\n            <p>{overview}</p>\n\n            <h4>Genres</h4>\n            <ul className={m.genres}>\n              {genres.map(genre => (\n                <li key={genre.id}>{genre.name}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n\n        <hr />\n\n        <p>Addidition information</p>\n        <ul>\n          <li>\n            <NavLink\n              to={`${url}/cast`}\n              className=\"NavLink\"\n              activeClassName=\"NavLink--active\"\n            >\n              Cast\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              to={`${url}/reviews`}\n              className=\"NavLink\"\n              activeClassName=\"NavLink--active\"\n            >\n              Reviews\n            </NavLink>\n          </li>\n        </ul>\n\n        <hr />\n\n        <Switch>\n          <Route\n            path=\"/movies/:movieId/cast\"\n            render={props => {\n              return <Cast {...props} cast={cast} />;\n            }}\n          />\n          <Route\n            path=\"/movies/:movieId/reviews\"\n            render={props => {\n              return <Reviews {...props} reviews={reviews} />;\n            }}\n          />\n        </Switch>\n      </>\n    );\n  }\n}\n\nexport default MovieDetailsPageView;\n\n// 26. создаём class. Рендерить этот компонент мы хотим после (вместо) списка всех видео, после добавлению к адресу id выбранного фильма, например /books/:bookId - это просто строка, сама по себе ничего не означающая, \":\" значит динамический параметр, означает, что реагировать на всё, что будет после /books/. Эту строку адреса мы так же можем записать в раут App...\n\n// 28. переходим на нашей страничке в Movies и смотрим в тулзы, видим, что зарендерен MoviesPageView, смотрим в его проп match и видим, что isExact: true, а path и url совпадают, но это не значит, что они одинаковые...\n// переходим на страницу одного фильма, смотрим туда же на пропы и видим, что isExact: true, а path и url разные.\n// смотрим на проп params и видим, что у него идёт определение {path: url}, это как раз потому что в нашем рауте в path стоит динамический параметр \":\", означающий, что запись после него movieId - это лишь переменная.\n// 29. поэтому, чтобы при переходе на страницу одной книги нам сразу писался идентификатор фильма, мы може писать в заглавии {this.props.match.params.movieId}\n// доступ к идентификатору нужен не для названия, а для нового запроса к фильму по id? потому что на эту страницу мы можем перейти не только из /movies, но и набрав вручную, а если до этого небыло запроса на все книги, то и из state в /movies нечего брать\n// 30. делаем запрос при маунте, где параметром книги делаем наш проп с id. Поэтому тут class.\n// 31. приходит объект со свойством data и у того объект свойств. Все свойства нам не нужны, поэтому мы можем выбрать необходимые, записать их в стейт и распылить нужный ответ в стейт.\n// 32. Рендерим разметку:\n// --- деструктуризируем стейт, вытягиваем свойства\n// --- деструктуризируем значение {movieId} из пропса this.props.match.params\n// ---находим в доках правильный запрос для картинок и присваеваем его переменной imageUrl\n// --- прописываем разметку для названия, года, рейтинга, описания, постера и жанров\n('---');\n// теперь делаем вложенный маршрут - это когда на той же странице не переходя на другую у нас открывается что-то, в данном случае - это информации о актёрском составе и обзоры. Раут - это просто компонент, мы можем его вставлять в рендере другого компонента. Так как у нас только кусочек страницы, то мы можем делать не view, а просто компонент\n// 33. импортируем NavLink, обворачиваем в него Cast и Review и прописываем to=\"/movies/:movieId/cast\" и \".../review\". В to= первую часть url нужно тоже писать динамикой, как мы это делали в MoviesPageView to={`${this.props.match.url}/cast`}\n// 34. для добавлеия вложенного свойства Cast в запросе нужно добавить не _embed=credits (_expand=credits), а дополнительный параметр, указаный в доках на сайте &append_to_response=credits после. Смотрим в тулзах на компонент MovieDetailsPageView, на его state.\n// 35. нам нужно передать из MovieDetailsPageView в Cast id фильма, сделать это можно через СПЕЦИАЛЬНЫЙ проп render={props => <Cast {...props} /> }. Передавать нужно ф-цию, в которую будут приходить пропы раутера (history, location, match), они передаются автоматически, если мы передаём через component={}, а через рендер нужно вручную, на выходе наш тег с компонентом и в него распыляем эти пропсы и наш список Cast из стейта.\n// 36. повторяем с Review и переходим к этим компонентам\n","import React from 'react';\n\nconst NotFoundView = () => {\n  return <h1>Sorry, but this page not found</h1>;\n};\n\nexport default NotFoundView;\n","import React from 'react';\nimport { Route, NavLink, Switch } from 'react-router-dom';\n\nimport HomePageView from './views/HomePageView';\nimport MoviesPageView from './views/MoviesPageView';\nimport MovieDetailsPageView from './views/MovieDetailsPageView';\nimport NotFoundView from './views/NotFoundView';\n\nimport m from './App.module.css';\n\nconst API = '4f24a465004dec8d1f65f162bb769c3a';\nconst fetch = 'https://api.themoviedb.org/3';\n\nconst App = () => (\n  <>\n    <ul className={m.AppBar}>\n      <li>\n        <NavLink exact to=\"/\" className={m.NavLink} activeClassName={m.active}>\n          Home\n        </NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/movies\" className={m.NavLink} activeClassName={m.active}>\n          Movies\n        </NavLink>\n      </li>\n    </ul>\n\n    <Switch>\n      <Route\n        exact\n        path=\"/\"\n        render={props => {\n          return <HomePageView {...props} API={API} fetch={fetch} />;\n        }}\n      />\n      <Route\n        exact\n        path=\"/movies\"\n        render={props => {\n          return <MoviesPageView {...props} API={API} fetch={fetch} />;\n        }}\n      />\n      <Route\n        path=\"/movies/:movieId\"\n        render={props => {\n          return <MovieDetailsPageView {...props} API={API} fetch={fetch} />;\n        }}\n      />\n      <Route component={NotFoundView} />\n    </Switch>\n  </>\n);\n\n// https://developers.themoviedb.org/3/trending/get-trending - список самых популярных фильмов на сегодня для создания коллекции на главной странице.\n// /trending/{movie}/{week}\n\n// https://developers.themoviedb.org/3/search/search-movies - поиск кинофильма по ключевому слову на странице фильмов.\n// https://developers.themoviedb.org/3/movies/get-movie-details - запрос полной информации о фильме для страницы кинофильма.\n// https://developers.themoviedb.org/3/movies/get-movie-credits - запрос информации о актёрском составе для страницы кинофильма.\n// https://developers.themoviedb.org/3/movies/get-movie-reviews - запрос обзоров для страницы кинофильма.\n\nexport default App;\n\n// нам нужно спроэктировать приложение, сделать маршруты, создаём ф-цию\n// 4. импорт { Route }\n// 5. рендерим раут передавая в него адрес и компонент как ссылку (страница вьюха)\n// 6. создаём вьюху HomePageView, импортируем её\n// 7. пишем в проп раута component = {} и соответствующий ему path=\"\"\n// 8. то же самое делаем с остальными вьюхами\n// 9. exact используем там, где нужно точное совпадение, потому что рендер будет даже там, где совпадение path минимальное (HomePageView зарендерится и при /movies, потому что совпадает \"/\")\n('---');\n// Cейчас мы можем вводитьадреса только руками, поэтому нам нужно сделатьнормальную навигацию. Если делать ссылку типа <a href=\"\">, то будет перезагрузка браузера, нам это не нужно. Нам нужно только переписать url в адресной строке на тот, который мы укажем, а потом BrouserRouter увидит изменение и перерендерит страницу.\n\n// 10. Импортим Router.Link или { Link }, закинуть в рендер (можно в отдельные <li>), в проп to=\"\" продублировать наши адреса и подписать их между тегами <Link></Link>, он под капотом сам отрендерит теги <a href=\"\">, но изменит только адресную строку без перезагрузки страницы.\n// 11. Если перейдём на (пропишем) несуществующий путь, то нужно отрендерить отдельный компонент, создаём NotFoundView. Если не передать в него путь, то он будет рендериться всегда (если не передать путь во всех раутах, то все компоненты будут рендериться всегда). Поэтому ставим Switch, чтобы выбирался только один из.\n// 12. Импортируем Router.Switch или { Switch }, обворачиваем им все наши рауты\n\n// 13. Для стилизации вместо Link используем NavLink, он использует 2 пропа для объекта инлайн-стилей (создаём const styles = {}) - базовый и активный, но мы будем использовать module.css, поэтому используем className и activeClassName, а styles удаляем.\n// 14. Проверяем применение классов в Elements и видим, что activeClassName применяется к Home постоянно - это потому что как и в случае с Route path=\"/\", так и в NavLink to=\"/\" нужно использовать exact там, где необходимо для точного совпадения.\n\n// 15. Для общих свойств (например один автор нескольких книг) есть специальные параметры\n// /authors?_embed=books - объект авторов и свойство с массивом объектов книг (встраивает)\n// /books?_expand=author - объект книг и свойство с объектом автора (расширяет)\n('---');\n// Теперь нам нужно сделать запрос на бекенд при нажатии на ссылку, начнём с коллекции всех фильмов в MoviesPageView\n('---');\n// 27. добавляем раут для MovieDetailsPageView (если ещё не добавили) и exact, чтоб не смешивался, либо пишем эту строку ниже остальных, если нельзя exact, потому что Switch работает сверху вниз. => MovieDetailsPageView\n('---');\n// --- API и адрес запроса прописываем в переменные и передаём пропсами во все рауты\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/base.module.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// 1. установили react-router-dom\r\n// 2. импорт  React.BrowserRouter или  { BrowserRouter } он следит за адресной строкой, при её изменении будет делать то, что мы скажем\r\n// 3. обернули в него наше приложение\r\n// переходим в App\r\n"],"sourceRoot":""}