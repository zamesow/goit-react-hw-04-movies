{"version":3,"sources":["views/MoviesPageView.module.css","components/MoviePreview/MoviePreview.module.css","components/MoviesList/MoviesList.module.css","components/MoviePreview/MoviePreview.jsx","components/MoviesList/MoviesList.jsx","views/HomePageView.jsx"],"names":["module","exports","MoviePreview","poster_path","title","release_date","className","m","src","alt","slice","withRouter","movies","location","moviesList","map","id","item","to","pathname","state","from","HomePageView","a","this","props","API","mainUrl","Axios","get","response","setState","data","results","localStorage","removeItem","container","headBlock","Component"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,UAAY,kCAAkC,UAAY,kCAAkC,QAAU,kC,mBCAxHD,EAAOC,QAAU,CAAC,qBAAqB,yCAAyC,0BAA0B,8CAA8C,qBAAqB,2C,mBCA7KD,EAAOC,QAAU,CAAC,WAAa,iC,kHCoBhBC,EAlBM,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAC1C,OACE,sBAAKC,UAAWC,IAAE,sBAAlB,UACE,qBAAKC,IAAG,yCAAoCL,GAAeM,IAAKL,IAEhE,sBAAKE,UAAWC,IAAE,2BAAlB,UACE,oBAAID,UAAWC,IAAE,sBAAjB,mBAA4CH,KAE3CC,GACC,oBAAIC,UAAWC,IAAE,sBAAjB,oBACOF,EAAaK,MAAM,EAAG,GAD7B,c,iBCgBKC,eAvBI,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC5B,OACE,oBAAIP,UAAWC,IAAEO,WAAjB,SACGF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIb,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,aAA3B,OACV,oBAAaC,UAAWC,IAAEU,KAA1B,SACE,cAAC,IAAD,CACEC,GAAI,CACFC,SAAS,WAAD,OAAaH,GACrBI,MAAO,CAAEC,KAAMR,IAHnB,SAME,cAAC,EAAD,CACEV,YAAaA,EACbC,MAAOA,EACPC,aAAcA,OAVXW,Y,4JCHXM,E,4MACJF,MAAQ,CACNR,OAAQ,I,8FAGV,kCAAAW,EAAA,+DAC2BC,KAAKC,MAAtBC,EADV,EACUA,IAAKC,EADf,EACeA,QADf,SAIyBC,IAAMC,IAAN,UAClBF,EADkB,wCACqBD,IAL9C,OAIQI,EAJR,OASEN,KAAKO,SAAS,CAAEnB,OAAQkB,EAASE,KAAKC,UAGtCC,aAAaC,WAAW,UACxBD,aAAaC,WAAW,aAb1B,gD,0EAiBA,WAAU,IACAvB,EAAWY,KAAKJ,MAAhBR,OACR,OACE,sBAAKN,UAAWC,IAAE6B,UAAlB,UACE,oBAAI9B,UAAWC,IAAE8B,UAAjB,4BACA,8BACE,cAAC,IAAD,CAAYzB,OAAQA,a,GA5BH0B,aAmCZhB","file":"static/js/home-page-view.584611e7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MoviesPageView_container__11pun\",\"headBlock\":\"MoviesPageView_headBlock__1mWdC\",\"formBar\":\"MoviesPageView_formBar__19t6C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MoviePreview-thumb\":\"MoviePreview_MoviePreview-thumb__1K5ai\",\"MoviePreview-titleBlock\":\"MoviePreview_MoviePreview-titleBlock__JUGv0\",\"MoviePreview-title\":\"MoviePreview_MoviePreview-title__2o5eU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"moviesList\":\"MoviesList_moviesList__3rZPk\"};","import React from 'react';\nimport m from './MoviePreview.module.css';\n\nconst MoviePreview = ({ poster_path, title, release_date }) => {\n  return (\n    <div className={m[`MoviePreview-thumb`]}>\n      <img src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} />\n\n      <div className={m[`MoviePreview-titleBlock`]}>\n        <h5 className={m[`MoviePreview-title`]}>{`${title}`}</h5>\n\n        {release_date && (\n          <h5 className={m[`MoviePreview-title`]}>\n            {`(${release_date.slice(0, 4)})`}\n          </h5>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MoviePreview;\n\n// 56. приняли пропсы и расписали как надо\n// --- добавили классы -> MovieDetailsPageView\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport MoviePreview from '../MoviePreview/MoviePreview';\nimport m from './MoviesList.module.css';\n\nconst MoviesList = ({ movies, location }) => {\n  return (\n    <ul className={m.moviesList}>\n      {movies.map(({ id, poster_path, title, release_date }) => (\n        <li key={id} className={m.item}>\n          <Link\n            to={{\n              pathname: `/movies/${id}`,\n              state: { from: location },\n            }}\n          >\n            <MoviePreview\n              poster_path={poster_path}\n              title={title}\n              release_date={release_date}\n            />\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default withRouter(MoviesList);\n// Саша Репета для чего-то использовал User snippet reexport (посмотреть)\n\n// 52. переиспользуемый компонент MoviesList -> 45. MoviesPageView\n\n// 53. 3 пропа передаются только тому компоненту, который рендерится с помощью Route\n// --- в противном случае нужен {withRouter} (ф-ция или компонент высшего порядка? компонент-обёртка)\n// --- при экспорте вызывается как ф-ция с ссылкой на основную ф-цию withRouter(MoviesList)\n// --- сначала withRouter обворачивает нашу ф-цию, а потом под капотом в неё возвращает пропы, т.е. в HomePageView и MoviesPageView рендерится не MoviesList, а компонент зарендеренный withRouter с таким же именем MoviesList\n// 54. т.к. передаются разные url, нужно подготовить исходя из источника\n// --- вытягиваем его из match и вставляем динамически\n// --- или в нашем случае, т.к. постоянно переходим по одному адресу, жестко его прописать в Link to={/movies/}\n// --- withrouter в таком случае не нужен\n('---');\n// 55. делаем превьюшки фильмов -> MoviePreview\n// --- импортируем и рендерим в ссылку компонент превьюшки фильма\n// --- распыляем в него проп movie со всеми пропсами\n// --- но лучше кидать конкретные пропсы, а не все вподряд (так их видно конкретно и меньше)\n('---');\n// 58. в Link to= можно передать не только строку, но и объект настроек (props.location) {pathname: `/books/${id}`}\n// --- можно так же передавать state с информацией. этой информацией будет весь объект текущей локации location\n// --- state: {from: location} - проп, принятый {параметрах}, а чтоб он принялся нужен withRouter\n// --- теперь видим в location.state.from.pathname запись последнего url -> MovieDetailsPageView\n","import React, { Component } from 'react';\n// import { withRoutetr } from 'react-router-dom';\nimport Axios from 'axios';\nimport MoviesList from '../components/MoviesList';\nimport m from './MoviesPageView.module.css';\n\nclass HomePageView extends Component {\n  state = {\n    movies: [],\n  };\n\n  async componentDidMount() {\n    const { API, mainUrl } = this.props;\n    // console.log(this.props);\n\n    const response = await Axios.get(\n      `${mainUrl}/trending/movie/week?api_key=${API}`,\n    );\n    // console.log(response.data.results);\n\n    this.setState({ movies: response.data.results });\n\n    // if (prevState.movies !== this.state.movies) {    ша (зкумЫефеуюьщмшуы !== ершыюыефеуюьщмшуы) Х\n    localStorage.removeItem('movies');\n    localStorage.removeItem('formValue');\n    // }    Ъ\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={m.container}>\n        <h1 className={m.headBlock}>Trending today</h1>\n        <div>\n          <MoviesList movies={movies} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HomePageView;\n\n// 40. переносим сюда весь код из MoviesPageView, т.к. это должна быть домашняя страница\n// --- меняем, где нужно ссылки и адреса с MoviesPageView на HomePageView\n// --- в Link нужно добавить \"movies\" потому что в match.url уже не \"/movies\", а просто \"/\"\n// --- API выносим в App и передаём сюда пропсом\n// 47. переиспользуем компонент MoviesList закидывая в него такие же пропсы как и в MoviesPageView, но с другим пропсом url={}\n// 51. удаляем данные в сторэдже\n"],"sourceRoot":""}