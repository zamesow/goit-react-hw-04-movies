{"version":3,"sources":["services/fetch-api.jsx","views/MoviesPageView.module.css","components/MoviePreview/MoviePreview.module.css","components/MoviesList/MoviesList.module.css","components/MoviePreview/MoviePreview.jsx","components/MoviesList/MoviesList.jsx","views/HomePageView.jsx"],"names":["fetchMovie","formValue","slug","apiKey","baseUrl","Axios","get","module","exports","MoviePreview","poster_path","title","release_date","className","m","src","alt","slice","withRouter","movies","location","moviesList","map","id","item","to","pathname","state","from","HomePageView","a","response","this","setState","data","results","localStorage","removeItem","container","headBlock","Component"],"mappings":"yIAAA,qBA4BeA,IA1BI,SAACC,EAAWC,GAC7B,IAAMC,EAAS,mCACTC,EAAU,+BAGhB,OAAIH,EACYI,IAAMC,IAAN,UACTF,EADS,iCACuBD,EADvB,iCACsDF,EADtD,gCAOZC,EACYG,IAAMC,IAAN,UACTF,EADS,kBACQF,EADR,oBACwBC,EADxB,YAXU,qCAWV,oBAOFE,IAAMC,IAAN,UAAaF,EAAb,wCAAoDD,M,mBCtBpEI,EAAOC,QAAU,CAAC,UAAY,kCAAkC,UAAY,kCAAkC,QAAU,kC,mBCAxHD,EAAOC,QAAU,CAAC,qBAAqB,yCAAyC,0BAA0B,8CAA8C,qBAAqB,2C,mBCA7KD,EAAOC,QAAU,CAAC,WAAa,iC,iHCsBhBC,EAlBM,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAC1C,OACE,sBAAKC,UAAWC,IAAE,sBAAlB,UACE,qBAAKC,IAAG,yCAAoCL,GAAeM,IAAKL,IAEhE,sBAAKE,UAAWC,IAAE,2BAAlB,UACE,oBAAID,UAAWC,IAAE,sBAAjB,mBAA4CH,KAE3CC,GACC,oBAAIC,UAAWC,IAAE,sBAAjB,oBACOF,EAAaK,MAAM,EAAG,GAD7B,c,iBCkBKC,eAxBI,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC5B,OACE,oBAAIP,UAAWC,IAAEO,WAAjB,SACGF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIb,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,aAA3B,OACV,oBAAaC,UAAWC,IAAEU,KAA1B,SACE,cAAC,IAAD,CACEC,GAAI,CAEFC,SAAS,WAAD,OAAaH,GACrBI,MAAO,CAAEC,KAAMR,IAJnB,SAOE,cAAC,EAAD,CACEV,YAAaA,EACbC,MAAOA,EACPC,aAAcA,OAXXW,Y,mJCPXM,E,4MACJF,MAAQ,CACNR,OAAQ,I,8FAGV,4BAAAW,EAAA,sEACyB9B,cADzB,OACQ+B,EADR,OAGEC,KAAKC,SAAS,CAAEd,OAAQY,EAASG,KAAKC,UAEtCC,aAAaC,WAAW,UACxBD,aAAaC,WAAW,aAN1B,gD,0EASA,WAAU,IACAlB,EAAWa,KAAKL,MAAhBR,OACR,OACE,sBAAKN,UAAWC,IAAEwB,UAAlB,UACE,oBAAIzB,UAAWC,IAAEyB,UAAjB,4BACA,8BACE,cAAC,IAAD,CAAYpB,OAAQA,a,GApBHqB,aA2BZX","file":"static/js/home-page-view.5c00e2b3.chunk.js","sourcesContent":["import Axios from 'axios';\n\nconst fetchMovie = (formValue, slug) => {\n  const apiKey = '4f24a465004dec8d1f65f162bb769c3a';\n  const baseUrl = 'https://api.themoviedb.org/3';\n  const creditsAndReviews = 'append_to_response=credits,reviews';\n\n  if (formValue) {\n    const fetch = Axios.get(\n      `${baseUrl}/search/movie?api_key=${apiKey}&language=en-US&query=${formValue}&page=1&include_adult=false`,\n    );\n\n    return fetch;\n  }\n\n  if (slug) {\n    const fetch = Axios.get(\n      `${baseUrl}/movie/${slug}?api_key=${apiKey}&${creditsAndReviews}&language=en-US`,\n    );\n\n    return fetch;\n  }\n\n  const fetch = Axios.get(`${baseUrl}/trending/movie/week?api_key=${apiKey}`);\n\n  return fetch;\n};\n\nexport default fetchMovie;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MoviesPageView_container__11pun\",\"headBlock\":\"MoviesPageView_headBlock__1mWdC\",\"formBar\":\"MoviesPageView_formBar__19t6C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MoviePreview-thumb\":\"MoviePreview_MoviePreview-thumb__1K5ai\",\"MoviePreview-titleBlock\":\"MoviePreview_MoviePreview-titleBlock__JUGv0\",\"MoviePreview-title\":\"MoviePreview_MoviePreview-title__2o5eU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"moviesList\":\"MoviesList_moviesList__3rZPk\"};","import React from 'react';\n// import slugify from 'slugify';\n\nimport m from './MoviePreview.module.css';\n\nconst MoviePreview = ({ poster_path, title, release_date }) => {\n  return (\n    <div className={m[`MoviePreview-thumb`]}>\n      <img src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} />\n\n      <div className={m[`MoviePreview-titleBlock`]}>\n        <h5 className={m[`MoviePreview-title`]}>{`${title}`}</h5>\n        {/* {slugify(`${title} ${id}`, { lower: true })} */}\n        {release_date && (\n          <h5 className={m[`MoviePreview-title`]}>\n            {`(${release_date.slice(0, 4)})`}\n          </h5>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MoviePreview;\n\n// 56. приняли пропсы и расписали как надо\n// --- добавили классы -> MovieDetailsPageView\n\n('Slug'); // 70. доп.занятие\n// Свойство location.state\n// Слаги\n// --- [https://dev.to/fayazara/this-free-tools-for-developers-are-45p3]\n// --- `slugify` пакет для создания слагов [https://www.npmjs.com/package/slugify]\n// --- regexp101 [https://regex101.com/]\n\n// React Query\n// --- Ищите туториалы по react query v3\n// --- React Hook Form\n\n// Slug - когда в url используется не id ресурса, а красивая строка с добавленым вконце id-шником\n// --- удобство в lowercase и тире между словами вместо символов, а вконце id\n// --- удобнее для seo\n// --- закидывается slugidy('любая строка') и на выходе получаем [любая-строка]\n// --- можно передать любой объект настроек:\n\n// --- slugidy('любая строка', {\n//        replacement: '-', // чем разделяем\n//        remove: undefined, // что убираем\n//        lower: false, // нижний регистр, нам нужен true\n//        strict: false, // убрать препинания типа запятых, нам нужен true\n//        localea: 'vi' // чем разделяем\n//      });\n\n// 71.npm i slugify\n// --- import slugify from 'slugify';\n// --- рендерим для примера все названия фильмов {slugify(title)}\n// --- пробуем с объектом настроек\n// --- передаём вконце id\n// --- убираем импорт и рендер slugify -> MoviesList\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport MoviePreview from '../MoviePreview/MoviePreview';\n// import slugify from 'slugify';\nimport m from './MoviesList.module.css';\n\n// const makeSlug = string => slugify(string, { lower: true });\n\nconst MoviesList = ({ movies, location }) => {\n  return (\n    <ul className={m.moviesList}>\n      {movies.map(({ id, poster_path, title, release_date }) => (\n        <li key={id} className={m.item}>\n          <Link\n            to={{\n              // pathname: `/movies/${makeSlug(`${title} ${id}`)}`,\n              pathname: `/movies/${id}`,\n              state: { from: location },\n            }}\n          >\n            <MoviePreview\n              poster_path={poster_path}\n              title={title}\n              release_date={release_date}\n            />\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default withRouter(MoviesList);\n// Саша Репета для чего-то использовал User snippet reexport (посмотреть)\n\n// 52. переиспользуемый компонент MoviesList -> 45. MoviesPageView\n\n// 53. 3 пропа передаются только тому компоненту, который рендерится с помощью Route\n// --- в противном случае нужен {withRouter} (ф-ция или компонент высшего порядка? компонент-обёртка)\n// --- при экспорте вызывается как ф-ция с ссылкой на основную ф-цию withRouter(MoviesList)\n// --- сначала withRouter обворачивает нашу ф-цию, а потом под капотом в неё возвращает пропы, т.е. в HomePageView и MoviesPageView рендерится не MoviesList, а компонент зарендеренный withRouter с таким же именем MoviesList\n// 54. т.к. передаются разные url, нужно подготовить исходя из источника\n// --- вытягиваем его из match и вставляем динамически\n// --- или в нашем случае, т.к. постоянно переходим по одному адресу, жестко его прописать в Link to={/movies/}\n// --- withrouter в таком случае не нужен\n('---');\n// 55. делаем превьюшки фильмов -> MoviePreview\n// --- импортируем и рендерим в ссылку компонент превьюшки фильма\n// --- распыляем в него проп movie со всеми пропсами\n// --- но лучше кидать конкретные пропсы, а не все вподряд (так их видно конкретно и меньше)\n('---');\n// 58. в Link to= можно передать не только строку, но и объект настроек (props.location) {pathname: `/books/${id}`}\n// --- можно так же передавать state с информацией. этой информацией будет весь объект текущей локации location\n// --- state: {from: location} - проп, принятый {параметрах}, а чтоб он принялся нужен withRouter\n// --- теперь видим в location.state.from.pathname запись последнего url -> MovieDetailsPageView\n\n('Slug');\n// -> MoviePreview\n// 72. импортируем и рендерим наш slugify в pathname: `/movies/${slugify(`${title} ${id}`, { lower: true })}`,\n// --- причёсываем, вынося в отдельныю ф-цию\n// 73. если мы теперь перейдём в карточку фильма, то в url у нас будет /movies/godzilla-vs.-kong-399566, поэтому перейти не сможем, т.к. в routes у нас записано /movies/:movieId\n// --- меняем на /movies/:slug\n\n// 74. нам нужно вытащить id с этого слага\n// --- мы не може заранее знать сколько будет символов после /movies/\n// --- нужно написать регулярное выражение\n","import React, { Component } from 'react';\nimport fetchMovie from '../services/fetch-api';\nimport MoviesList from '../components/MoviesList';\nimport m from './MoviesPageView.module.css';\n\nclass HomePageView extends Component {\n  state = {\n    movies: [],\n  };\n\n  async componentDidMount() {\n    const response = await fetchMovie();\n\n    this.setState({ movies: response.data.results });\n\n    localStorage.removeItem('movies');\n    localStorage.removeItem('formValue');\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={m.container}>\n        <h1 className={m.headBlock}>Trending today</h1>\n        <div>\n          <MoviesList movies={movies} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HomePageView;\n\n// 40. переносим сюда весь код из MoviesPageView, т.к. это должна быть домашняя страница\n// --- меняем, где нужно ссылки и адреса с MoviesPageView на HomePageView\n// --- в Link нужно добавить \"movies\" потому что в match.url уже не \"/movies\", а просто \"/\"\n// --- API выносим в App и передаём сюда пропсом\n// 47. переиспользуем компонент MoviesList закидывая в него такие же пропсы как и в MoviesPageView, но с другим пропсом url={}\n// 51. удаляем данные в сторэдже\n"],"sourceRoot":""}