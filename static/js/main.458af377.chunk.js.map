{"version":3,"sources":["App.module.css","styles/base.module.css","components/Navigation/Navigation.jsx","components/AppBar/AppBar.jsx","App.jsx","index.jsx","routes.js"],"names":["module","exports","Navigation","className","m","AppBar","exact","to","routes","home","NavLink","activeClassName","active","movies","HomePageView","lazy","MoviesPageView","MovieDetailsPageView","NotFoundPageView","API","mainUrl","App","fallback","path","render","props","movieDetails","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,OAAS,oBAAoB,QAAU,qBAAqB,OAAS,sB,mBCAvFD,EAAOC,QAAU,CAAC,QAAU,sBAAsB,kBAAkB,gC,yIC4BrDC,EAvBI,WACjB,OACE,sBAAKC,UAAWC,IAAEC,OAAlB,UACE,cAAC,IAAD,CACEC,OAAK,EACLC,GAAIC,IAAOC,KACXN,UAAWC,IAAEM,QACbC,gBAAiBP,IAAEQ,OAJrB,kBASA,cAAC,IAAD,CACEL,GAAIC,IAAOK,OACXV,UAAWC,IAAEM,QACbC,gBAAiBP,IAAEQ,OAHrB,wBCPSP,EARA,WACb,OACE,iCACE,cAAC,EAAD,OCCAS,EAAeC,gBAAK,kBACxB,sDAEIC,EAAiBD,gBAAK,kBAC1B,sDAEIE,EAAuBF,gBAAK,kBAChC,sDAIIG,EAAmBH,gBAAK,kBAC5B,gCAKII,EAAM,mCACNC,EAAU,+BAoCDC,EAlCH,kBACV,qCACE,cAAC,EAAD,IAEA,cAAC,WAAD,CAAUC,SAAU,2FAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEhB,OAAK,EACLiB,KAAMf,IAAOC,KACbe,OAAQ,SAAAC,GACN,OAAO,cAACX,EAAD,2BAAkBW,GAAlB,IAAyBN,IAAKA,EAAKC,QAASA,QAGvD,cAAC,IAAD,CACEd,OAAK,EACLiB,KAAMf,IAAOK,OACbW,OAAQ,SAAAC,GACN,OAAO,cAACT,EAAD,2BAAoBS,GAApB,IAA2BN,IAAKA,EAAKC,QAASA,QAGzD,cAAC,IAAD,CACEG,KAAMf,IAAOkB,aACbF,OAAQ,SAAAC,GACN,OACE,cAACR,EAAD,2BAA0BQ,GAA1B,IAAiCN,IAAKA,EAAKC,QAASA,QAI1D,cAAC,IAAD,CAAOO,UAAWT,aCjD1BU,IAASJ,OACP,cAAC,IAAMK,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,U,+BCZX,KACbtB,KAAM,IACNI,OAAQ,UACRa,aAAc,sB","file":"static/js/main.458af377.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppBar\":\"App_AppBar__E-uqS\",\"NavLink\":\"App_NavLink__1tX2s\",\"active\":\"App_active__eYtTS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavLink\":\"base_NavLink__f9qMD\",\"NavLink--active\":\"base_NavLink--active__1hgQ8\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport routes from '../../routes';\n\nimport m from '../../App.module.css';\n\nconst Navigation = () => {\n  return (\n    <nav className={m.AppBar}>\n      <NavLink\n        exact\n        to={routes.home}\n        className={m.NavLink}\n        activeClassName={m.active}\n      >\n        Home\n      </NavLink>\n\n      <NavLink\n        to={routes.movies}\n        className={m.NavLink}\n        activeClassName={m.active}\n      >\n        Movies\n      </NavLink>\n    </nav>\n  );\n};\n\nexport default Navigation;\n\n//  51. обворачиваем навигацию в <nav> -> MoviesList\n","import React from 'react';\nimport Navigation from '../Navigation';\n\nconst AppBar = () => {\n  return (\n    <header>\n      <Navigation />\n    </header>\n  );\n};\n\nexport default AppBar;\n\n// 49. обворачиваем навигацию в <header>, но...\n// 50. даная навигация тут лишь часть AppBar, поэтому выносим её в отдельный компонент Navigation\n// --- импортируем и рендерим Navigation в <header> -> Navigation\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport AppBar from './components/AppBar';\n\nimport routes from './routes';\n\nconst HomePageView = lazy(() =>\n  import('./views/HomePageView' /* webpackChunkName: \"home-page-view\" */),\n);\nconst MoviesPageView = lazy(() =>\n  import('./views/MoviesPageView' /* webpackChunkName: \"movies-page-view\" */),\n);\nconst MovieDetailsPageView = lazy(() =>\n  import(\n    './views/MovieDetailsPageView' /* webpackChunkName: \"movie-details-page-view\" */\n  ),\n);\nconst NotFoundPageView = lazy(() =>\n  import(\n    './views/NotFoundPageView' /* webpackChunkName: \"not-found-page-view\" */\n  ),\n);\n\nconst API = '4f24a465004dec8d1f65f162bb769c3a';\nconst mainUrl = 'https://api.themoviedb.org/3';\n\nconst App = () => (\n  <>\n    <AppBar />\n\n    <Suspense fallback={<h1>Загружаем...</h1>}>\n      <Switch>\n        <Route\n          exact\n          path={routes.home}\n          render={props => {\n            return <HomePageView {...props} API={API} mainUrl={mainUrl} />;\n          }}\n        />\n        <Route\n          exact\n          path={routes.movies}\n          render={props => {\n            return <MoviesPageView {...props} API={API} mainUrl={mainUrl} />;\n          }}\n        />\n        <Route\n          path={routes.movieDetails}\n          render={props => {\n            return (\n              <MovieDetailsPageView {...props} API={API} mainUrl={mainUrl} />\n            );\n          }}\n        />\n        <Route component={NotFoundPageView} />\n      </Switch>\n    </Suspense>\n  </>\n);\n\nexport default App;\n\n// App.jsx - нам нужно спроэктировать приложение, сделать маршруты, создаём ф-цию\n// 4. импорт { Route }\n// 5. рендерим раут передавая в него адрес и компонент как ссылку (страница вьюха)\n// 6. создаём вьюху HomePageView, импортируем её\n// 7. пишем в проп раута component = {} и соответствующий ему path=\"\"\n// 8. то же самое делаем с остальными вьюхами\n// 9. exact используем там, где нужно точное совпадение, потому что рендер будет даже там, где совпадение path минимальное (HomePageView зарендерится и при /movies, потому что совпадает \"/\")\n('---');\n// Cейчас мы можем вводитьадреса только руками, поэтому нам нужно сделатьнормальную навигацию. Если делать ссылку типа <a href=\"\">, то будет перезагрузка браузера, нам это не нужно. Нам нужно только переписать url в адресной строке на тот, который мы укажем, а потом BrouserRouter увидит изменение и перерендерит страницу.\n\n// 10. Импортим Router.Link или { Link }, закинуть в рендер (можно в отдельные <li>), в проп to=\"\" продублировать наши адреса и подписать их между тегами <Link></Link>, он под капотом сам отрендерит теги <a href=\"\">, но изменит только адресную строку без перезагрузки страницы.\n// 11. Если перейдём на (пропишем) несуществующий путь, то нужно отрендерить отдельный компонент, создаём NotFoundPageView. Если не передать в него путь, то он будет рендериться всегда (если не передать путь во всех раутах, то все компоненты будут рендериться всегда). Поэтому ставим Switch, чтобы выбирался только один из.\n// 12. Импортируем Router.Switch или { Switch }, обворачиваем им все наши рауты\n\n// 13. Для стилизации вместо Link используем NavLink, он использует 2 пропа для объекта инлайн-стилей (создаём const styles = {}) - базовый и активный, но мы будем использовать module.css, поэтому используем className и activeClassName, а styles удаляем.\n// 14. Проверяем применение классов в Elements и видим, что activeClassName применяется к Home постоянно - это потому что как и в случае с Route path=\"/\", так и в NavLink to=\"/\" нужно использовать exact там, где необходимо для точного совпадения.\n\n// 15. Для общих свойств (например один автор нескольких книг) есть специальные параметры\n// /authors?_embed=books - объект авторов и свойство с массивом объектов книг (встраивает)\n// /books?_expand=author - объект книг и свойство с объектом автора (расширяет)\n('---');\n// Теперь нам нужно сделать запрос на бекенд при нажатии на ссылку, начнём с коллекции всех фильмов в MoviesPageView\n('---');\n// 27. добавляем раут для MovieDetailsPageView (если ещё не добавили) и exact, чтоб не смешивался, либо пишем эту строку ниже остальных, если нельзя exact, потому что Switch работает сверху вниз. => MovieDetailsPageView\n('---');\n// --- API и адрес запроса mainUrl прописываем в переменные и передаём пропсами во все рауты\n('---');\n// status:\n// --- 'idle', - простаивание\n// --- 'pending', - ожидание\n// --- 'resolved', - разрешение\n// --- 'rejected' - отклонение\n\n('Разделение кода');\n// 48. создаём и импортируем route.js для хранения маршрутов\n// --- прописываем динамику в Route path=\"{} и NavLink to={}\n// --- делаем AppBar и переносим туда нужные линки\n// --- импортируем AppBar и рендерим выше всех\n// -> AppBar\n\n('Динамический import');\n// 61. пробуем на ф-ции loader - создаём кнопку и грузим HomePageView для примера\n// создаём анонимку loader = () => import('./views/HomePageView');\n// --- в кнопке по onClick={() => loader()} одно и то же, что {() => import('./views/HomePageView')}\n// --- динамический импорт возвращает промис, поэтому к нему можно добавить .then(console.log)\n// --- коментим статический импорт для Home и его раут\n// --- получается, что ДИ позволяет ассинхронно загружать куски кода, а webpack разбивает их на отдельные части (чанки, чанкование)\n\n('Suspense, lazy - 01:01:30');\n// 62. в реакте есть готовые методы, поэтому import React, {Suspense, lazy}\n// кнопку Home можем убрать\n// --- при использовании чанкования статический импорт нужно удалить, потому что webpack всё равно включит его в бандл, он видит, что это синхронная зависимость\n// --- у lazy другой синтаксис от loader (loader типа вставляем в lazy), всегда есть доки реакта lazy(() => import('./views/HomePageView'));\n// --- т.е. мы передаём анонимку, которая возвращает промис.\n// --- мы можем наблюдать, как gjckt билда в build/static/js появились новые чанки\n// --- то же самое проделываем с остальными компонентами (вьюшками) - добавляем lazy и удаляем статику\n// для того, чтобы узнать какой чанк за какой компонент отвечает нужно во внутрь импорта через пробел вставить комментарий, например для home-page: /* webpackChunkName: \"home-page\" */\n// --- lazy работает внутри Suspense api. Когда рендерится ленивый компонент, например HomePageView при рендере раута, то он должен быть обёрнут в компонент Suspense, это т.н. контейнер для ленивых компонентов\n// --- его можно сделать один вокруг <Suspense><Switch></Switch></Suspense>\n// --- так же есть специальный проп fallback={<Spinner />} - он отобразит что-то, пока компонент загружается, например спиннер, а пишем как jsx-тег на другой компонент\n//  63. Cast и Reviews тоже можно обернуть в lazy, но нужно учитывать то, что если компоненты очень малы, то разбиение может ухучшить ситуацию -> MovieDetailsPageView\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './styles/base.module.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// 1. установили react-router-dom\n// 2. импорт  React.BrowserRouter или  { BrowserRouter } он следит за адресной строкой, при её изменении будет делать то, что мы скажем\n// 3. обернули в него наше приложение\n// переходим в App\n('---');\n// пропсы лучше не распылять, а передавать конкретно\n// жестко прописали адрес в Link to, потому что переходим по одному и тому же (при разных пропах url)\n","export default {\n  home: '/',\n  movies: '/movies',\n  movieDetails: '/movies/:movieId',\n  // cast: '/movies/:movieId/cast',\n  // reviews: '/movies/:movieId/reviews',\n};\n\n// '/' - компонент <HomePage>, домашняя страница со списком популярных кинофильмов.\n// '/movies' - компонент <MoviesPage>, страница поиска фильмов по ключевому слову.\n// '/movies/:movieId' - компонент <MovieDetailsPage>, страница с детальной информацией о кинофильме.\n// /movies/:movieId/cast - компонент <Cast>, информация о актерском составе. Рендерится на странице <MovieDetailsPage>.\n// /movies/:movieId/reviews - компонент <Reviews>, информация об обзорах. Рендерится на странице <MovieDetailsPage>.\n\n// делаем экспорт для маршрутов (cast и reviews - это вложенная навигация)\n"],"sourceRoot":""}